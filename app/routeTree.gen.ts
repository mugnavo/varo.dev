/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as SetupImport } from './routes/setup'
import { Route as AppImport } from './routes/app'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppConnectionsIdImport } from './routes/app/connections.$id'
import { Route as AppChatsIdImport } from './routes/app/chats.$id'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const SetupRoute = SetupImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppConnectionsIdRoute = AppConnectionsIdImport.update({
  id: '/connections/$id',
  path: '/connections/$id',
  getParentRoute: () => AppRoute,
} as any)

const AppChatsIdRoute = AppChatsIdImport.update({
  id: '/chats/$id',
  path: '/chats/$id',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/setup': {
      id: '/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof SetupImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/app/chats/$id': {
      id: '/app/chats/$id'
      path: '/chats/$id'
      fullPath: '/app/chats/$id'
      preLoaderRoute: typeof AppChatsIdImport
      parentRoute: typeof AppImport
    }
    '/app/connections/$id': {
      id: '/app/connections/$id'
      path: '/connections/$id'
      fullPath: '/app/connections/$id'
      preLoaderRoute: typeof AppConnectionsIdImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppChatsIdRoute: typeof AppChatsIdRoute
  AppConnectionsIdRoute: typeof AppConnectionsIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppChatsIdRoute: AppChatsIdRoute,
  AppConnectionsIdRoute: AppConnectionsIdRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/setup': typeof SetupRoute
  '/signin': typeof SigninRoute
  '/app/': typeof AppIndexRoute
  '/app/chats/$id': typeof AppChatsIdRoute
  '/app/connections/$id': typeof AppConnectionsIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/setup': typeof SetupRoute
  '/signin': typeof SigninRoute
  '/app': typeof AppIndexRoute
  '/app/chats/$id': typeof AppChatsIdRoute
  '/app/connections/$id': typeof AppConnectionsIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/setup': typeof SetupRoute
  '/signin': typeof SigninRoute
  '/app/': typeof AppIndexRoute
  '/app/chats/$id': typeof AppChatsIdRoute
  '/app/connections/$id': typeof AppConnectionsIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/setup'
    | '/signin'
    | '/app/'
    | '/app/chats/$id'
    | '/app/connections/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/setup'
    | '/signin'
    | '/app'
    | '/app/chats/$id'
    | '/app/connections/$id'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/setup'
    | '/signin'
    | '/app/'
    | '/app/chats/$id'
    | '/app/connections/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  SetupRoute: typeof SetupRoute
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  SetupRoute: SetupRoute,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/setup",
        "/signin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/",
        "/app/chats/$id",
        "/app/connections/$id"
      ]
    },
    "/setup": {
      "filePath": "setup.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/app/chats/$id": {
      "filePath": "app/chats.$id.tsx",
      "parent": "/app"
    },
    "/app/connections/$id": {
      "filePath": "app/connections.$id.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
