/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import type {
  FileRoutesByPath,
  CreateServerFileRoute,
} from "@tanstack/react-start/server";
import {
  createServerRoute,
  createServerFileRoute,
} from "@tanstack/react-start/server";

import { ServerRoute as ApiChatRouteImport } from "./../../src/routes/api/chat";
import { ServerRoute as ApiAuthSplatRouteImport } from "./../../src/routes/api/auth/$";

// Create/Update Routes

const rootRoute = createServerRoute();

const ApiChatRoute = ApiChatRouteImport.update({
  id: "/api/chat",
  path: "/api/chat",
  getParentRoute: () => rootRoute,
} as any);

const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: "/api/auth/$",
  path: "/api/auth/$",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-start/server" {
  interface FileRoutesByPath {
    "/api/chat": {
      id: "/api/chat";
      path: "/api/chat";
      fullPath: "/api/chat";
      preLoaderRoute: typeof ApiChatRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/api/auth/$": {
      id: "/api/auth/$";
      path: "/api/auth/$";
      fullPath: "/api/auth/$";
      preLoaderRoute: typeof ApiAuthSplatRouteImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module "./../../src/routes/api/chat" {
  const createServerFileRoute: CreateServerFileRoute<
    FileRoutesByPath["/api/chat"]["parentRoute"],
    FileRoutesByPath["/api/chat"]["id"],
    FileRoutesByPath["/api/chat"]["path"],
    FileRoutesByPath["/api/chat"]["fullPath"],
    unknown
  >;
}
declare module "./../../src/routes/api/auth/$" {
  const createServerFileRoute: CreateServerFileRoute<
    FileRoutesByPath["/api/auth/$"]["parentRoute"],
    FileRoutesByPath["/api/auth/$"]["id"],
    FileRoutesByPath["/api/auth/$"]["path"],
    FileRoutesByPath["/api/auth/$"]["fullPath"],
    unknown
  >;
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/api/chat": typeof ApiChatRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
}

export interface FileRoutesByTo {
  "/api/chat": typeof ApiChatRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/api/chat": typeof ApiChatRoute;
  "/api/auth/$": typeof ApiAuthSplatRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/api/chat" | "/api/auth/$";
  fileRoutesByTo: FileRoutesByTo;
  to: "/api/chat" | "/api/auth/$";
  id: "__root__" | "/api/chat" | "/api/auth/$";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  ApiChatRoute: typeof ApiChatRoute;
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute;
}

const rootRouteChildren: RootRouteChildren = {
  ApiChatRoute: ApiChatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/api/chat",
        "/api/auth/$"
      ]
    },
    "/api/chat": {
      "filePath": "api/chat.ts"
    },
    "/api/auth/$": {
      "filePath": "api/auth/$.ts"
    }
  }
}
ROUTE_MANIFEST_END */
